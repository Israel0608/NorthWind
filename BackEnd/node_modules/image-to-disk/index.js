"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_fileupload_1 = __importDefault(require("express-fileupload"));
const fs_1 = __importDefault(require("fs"));
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const uuid_1 = require("uuid");
class ImageToDisk {
    config(server, imagesFolder) {
        this.imagesFolder = imagesFolder;
        if (!fs_1.default.existsSync(imagesFolder))
            fs_1.default.mkdirSync(imagesFolder, { recursive: true });
        server.use((0, express_fileupload_1.default)());
    }
    save(image) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!image)
                return "";
            const extension = image.name.substring(image.name.lastIndexOf("."));
            const imageName = (0, uuid_1.v4)() + extension;
            const absolutePath = path_1.default.join(this.imagesFolder, imageName);
            yield image.mv(absolutePath);
            return imageName;
        });
    }
    update(oldImageName, newImage) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.delete(oldImageName);
            const imageName = yield this.save(newImage);
            return imageName;
        });
    }
    delete(oldImageName) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!oldImageName)
                return;
            const absolutePath = path_1.default.join(this.imagesFolder, oldImageName);
            if (!fs_1.default.existsSync(absolutePath))
                return;
            for (let i = 1; i <= 10; i++) {
                try {
                    yield promises_1.default.rm(absolutePath);
                    return;
                }
                catch (err) {
                    this.delay(50);
                }
            }
            throw new Error(`Failed to delete ${absolutePath}.`);
        });
    }
    delay(ms) {
        return new Promise(resolve => {
            setTimeout(() => resolve(), ms);
        });
    }
}
const imageToDisk = new ImageToDisk();
exports.default = imageToDisk;
